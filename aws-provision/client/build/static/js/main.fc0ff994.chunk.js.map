{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","queryServer","that","assertThisInitialized","fetch","then","response","json","console","log","setState","foo","catch","ex","createEducate","createWithAwsStandardAccount","associateElasticIp","copyGetStarted","runGetStarted","removeKnownHost","state","file","status","react_default","a","createElement","className","src","logo","alt","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAyFeA,2BAnFX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOJI,YAAc,WACV,IAAMC,EAAIP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,IACVU,MAAM,QACDC,KAAK,SAASC,GACX,OAAOA,EAASC,SAEnBF,KAAK,SAASE,GACXC,QAAQC,IAAI,cAAeF,GAC3BL,EAAKQ,SAAS,SAAAC,GAAG,OAAKJ,MAEzBK,MAAM,SAASC,GACZL,QAAQC,IAAI,oDAAqDI,MAnB/DnB,EAuBdoB,cAAiB,WACHnB,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,IACVU,MAAM,oBAzBIV,EA4BdqB,6BAAgC,WAClBpB,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,IACVU,MAAM,qBA9BIV,EAiCdsB,mBAAsB,WACRrB,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,IACVU,MAAM,0BAnCIV,EAsCduB,eAAkB,WACJtB,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,IACVU,MAAM,oCAxCIV,EA2CdwB,cAAiB,WACHvB,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,IACVU,MAAM,mCA7CIV,EAgDdyB,gBAAmB,WACLxB,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,IACVU,MAAM,qCAhDNV,EAAK0B,MAAQ,CACTC,KAAM,iCACNC,OAAQ,sBAJF5B,wEAwDV,OACI6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,+BAGJF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,UACY7B,KAAKuB,MAAME,OADvB,UACsCzB,KAAKuB,MAAMC,MAEjDE,EAAAC,EAAAC,cAAA,UAAQK,QAASjC,KAAKI,aAAtB,OACAsB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQK,QAASjC,KAAKiB,eAAtB,mCACAS,EAAAC,EAAAC,cAAA,UAAQK,QAASjC,KAAKkB,8BAAtB,oCACAQ,EAAAC,EAAAC,cAAA,UAAQK,QAASjC,KAAKmB,oBAAtB,wBACAO,EAAAC,EAAAC,cAAA,UAAQK,QAASjC,KAAKoB,gBAAtB,8BACAM,EAAAC,EAAAC,cAAA,UAAQK,QAASjC,KAAKsB,iBAAtB,kCAzEFY,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,kCE/HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.fc0ff994.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'whatwg-fetch';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            file: 'File name will be placed here.',\n            status: 'waiting for server'\n        };\n    }\n\n    queryServer = () => {\n        const that = this;\n        fetch('/foo')\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(json) {\n                console.log('parsed json', json);\n                that.setState(foo => (json));\n            })\n            .catch(function(ex) {\n                console.log('parsing failed, URL bad, network down, or similar', ex);\n            });\n    }\n    \n    createEducate  = () => {\n        const that = this;\n        fetch('/create-educate')\n    };\n\n    createWithAwsStandardAccount  = () => {\n        const that = this;\n        fetch('/create-standard')\n    };\n\n    associateElasticIp  = () => {\n        const that = this;\n        fetch('/associate-elastic-ip')\n    };\n\n    copyGetStarted  = () => {\n        const that = this;\n        fetch('/script-pusher/copy-get-started')\n    };\n\n    runGetStarted  = () => {\n        const that = this;\n        fetch('/script-pusher/run-get-started')\n    };\n\n    removeKnownHost  = () => {\n        const that = this;\n        fetch('/script-pusher/remove-known-host')\n    };\n\n    \n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <h2>Welcome to React</h2>\n                </div>\n\n                <p className=\"App-intro\">\n                    state: {this.state.status} file: {this.state.file}\n                </p>\n                <button onClick={this.queryServer}>Bar</button>\n                <div>\n                    <button onClick={this.createEducate}>Create with AWS Educate Account</button>\n                    <button onClick={this.createWithAwsStandardAccount}>Create with AWS Standard Account</button>\n                    <button onClick={this.associateElasticIp}>Associate Elastic Ip</button>\n                    <button onClick={this.copyGetStarted}>Copy the GetStarted Script</button>\n                    <button onClick={this.removeKnownHost}>Remove from KnownHost</button>\n                    \n\n\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}